---
- name: enable firewall for vlans
  routeros_command:
    commands: /interface bridge settings set use-ip-firewall=yes use-ip-firewall-for-vlan=yes
  when: firewall_vlan_enable

- name: set vlan filtering on bridge
  routeros_command:
    commands: "/interface bridge set ingress-filtering=yes name=bridge vlan-filtering=yes numbers=[ find name=bridge ]"
  when: 'vlans is defined'

- name: set pvid on untagged port
  routeros_command:
    commands: "/interface bridge port set  numbers=[find interface={{item.1}} ] pvid={{item.0.id}}"
  loop: "{{ vlans | subelements('untagged_interfaces', skip_missing=True) }}"

- name: create vlans
  routeros_command:
    commands:
      - "/interface vlan add interface=bridge name=VLAN-{{ item.key }} vlan-id={{ item.key }}"
  with_dict: "{{ vlans }}"

- name: create vlans  part 2 (with tagged and untagged)
  routeros_command:
    commands:
      - "/interface bridge vlan add bridge=bridge tagged={{ item.value.tagged_interfaces| join(',') }} untagged={{ item.value.untagged_interfaces| join(',') }} vlan-ids={{ item.key }}"
  with_dict: "{{ vlans }}"
  when:
    - item.value.untagged_interfaces is defined
    - item.value.tagged_interfaces is defined

- name: create vlans  part 2 (with tagged )
  routeros_command:
    commands:
      - "/interface bridge vlan add bridge=bridge tagged={{ item.value.tagged_interfaces| join(',') }} vlan-ids={{ item.key }}"
  with_dict: "{{ vlans }}"
  when:
    - item.value.untagged_interfaces is undefined
    - item.value.tagged_interfaces is defined

- name: create vlans  part 2 (with untagged )
  routeros_command:
    commands:
      - "/interface bridge vlan add bridge=bridge untagged={{ item.value.untagged_interfaces| join(',') }} vlan-ids={{ item.key }}"
  with_dict: "{{ vlans }}"
  when:
    - item.value.untagged_interfaces is defined
    - item.value.tagged_interfaces is undefined

- name: create vlans  part 4
  routeros_command:
    commands:
      - "/interface bridge port add bridge=bridge interface=VLAN-{{ item.key }} pvid={{ item.key }}"
  with_dict: "{{ vlans }}"

- name: create vlans  part 5 (set ip on vlan if you want)
  routeros_command:
    commands:
      - "/ip address add address={{ item.value.ip_address }}/{{ item.value.netmask }} comment=addr-vlan-{{ item.key }} interface=VLAN-{{ item.key }} network={{ item.value.network }}"
  with_dict: "{{ vlans }}"
  when: item.value.ip_address is defined

- name: create vlans  part 6 (set dhcp on vlan if you want)
  routeros_command:
    commands:
      - "/ip pool add name=dhcp-pool-vlan-{{ item.key }} ranges={{ item.value.dhcp_pool}}"
      - "/ip dhcp-server add address-pool=dhcp-pool-vlan-{{ item.key }} disabled=no interface=VLAN-{{ item.key }} name=dhcp-vlan-{{ item.key }}"
      - "/ip dhcp-server network add address={{ item.value.network }}/{{ item.value.netmask }} dns-server={{ item.value.dns }} gateway={{ item.value.ip_address }} netmask={{ item.value.netmask }} lease-time={{ item.value.leasetime | default ('3d')  }}"
  with_dict: "{{ vlans }}"
  when:
    - item.value.dhcp_pool is defined
    - item.value.dns is defined
